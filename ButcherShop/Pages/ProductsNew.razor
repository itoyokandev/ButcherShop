@page "/products/new"

@inject IDbContextFactory<ButcherShopContext> DbFactory
@inject NavigationManager Nav

<style>
    .row {
        margin-bottom: 16px;
    }
</style>

<RadzenTemplateForm Data="_product" Submit="@(async (Product arg) => { SubmitAsync(arg); })">
    <div class="row">
        <div class="col-md-12">
            <RadzenFieldset>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="商品名" for="ProductName" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Id="ProductName" Name="ProductName" @bind-Value="_product.ProductName" />
                        <RadzenRequiredValidator Component="ProductName" Text="商品名は必ず入力してください" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="よみがな" for="Yomigana" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Id="Yomigana" Name="Yomigana" @bind-Value="_product.Yomigana" />
                        <RadzenRequiredValidator Component="Yomigana" Text="よみがなは必ず入力してください" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="カテゴリー" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="false"
                                        TValue="int"
                                        AllowVirtualization="true"
                                        Class="w-100"
                                        Data=@_categories
                                        TextProperty="CategoryName"
                                        ValueProperty="CategoryID"
                                        @bind-Value="_product.CategoryID" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="ラベル印刷" for="LabelPrintingTarget" />
                    </div>
                    <div class="col-md-8">
                        <RadzenSelectBar @bind-Value="_product.LabelPrintingTarget" TValue="bool">
                            <Items>
                                <RadzenSelectBarItem Text="する" Value="true" />
                                <RadzenSelectBarItem Text="しない" Value="false" />
                            </Items>
                        </RadzenSelectBar>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="味付け" for="TargetOfSeasoning" />
                    </div>
                    <div class="col-md-8">
                        <RadzenSelectBar @bind-Value="_product.TargetOfSeasoning" TValue="bool">
                            <Items>
                                <RadzenSelectBarItem Text="する" Value="true" />
                                <RadzenSelectBarItem Text="しない" Value="false" />
                            </Items>
                        </RadzenSelectBar>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="単位" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="false"
                                        TValue="int"
                                        AllowVirtualization="true"
                                        Class="w-100"
                                        Data=@_units
                                        TextProperty="UnitName"
                                        ValueProperty="UnitID"
                                        @bind-Value="_product.UnitID" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="単価" for="UnitPrice" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric style="width: 100%;" Id="UnitPrice" Name="UnitPrice" @bind-Value="_product.UnitPrice" />
                        <RadzenRequiredValidator Component="UnitPrice" Text="単価は必ず入力してください" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="並び順" for="SortOrder" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric style="width: 100%;" Id="SortOrder" Name="SortOrder" @bind-Value="_product.SortOrder" />
                        <RadzenRequiredValidator Component="SortOrder" Text="並び順は必ず入力してください" />
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-8" style="margin-top: 16px;">
                        <RadzenButton ButtonStyle="ButtonStyle.Light" style="display: inline-block; margin-right: 20px;" Text="戻る" Click="@Cancel" Is_busy="_busy" />
                        <RadzenButton ButtonType="ButtonType.Submit" class="btn btn-secondary" Style="margin-right: 20px;" Text="登録する" Is_busy="_busy" />
                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </div>
</RadzenTemplateForm>

@if (_error)
{
    <div class="row">
        <div class="col-md-12">
            <div class="alert alert-danger">@_errorMessage</div>
        </div>
    </div>
}


@code {
    private Product _product = new() { CategoryID = 1, UnitID = 1 };

    private IEnumerable<Category>? _categories;

    private IEnumerable<Unit>? _units;

    private bool _busy;

    private bool _error;

    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        _categories = await context.Categories.OrderBy(c => c.SortOrder).ToListAsync();
        _units = await context.Units.OrderBy(u => u.SortOrder).ToListAsync();
    }

    private async Task SubmitAsync(Product arg)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;
            _error = false;
            _errorMessage = string.Empty;

            using var context = await DbFactory.CreateDbContextAsync();

            int nameSameCount = await context.Products.CountAsync(c => c.ProductName == arg.ProductName.Trim());
            if (nameSameCount > 0)
            {
                _error = true;
                _errorMessage = "同じ商品名が既に登録されているため登録できません。";
                return;
            }

            // TODO 消費税率の設定
            arg.TaxRate = 0.08m;
            arg.EditedDatetime = DateTime.Now;
            // TODO User管理
            arg.EditedUserID = 1;
            await context.Products.AddAsync(arg);
            await context.SaveChangesAsync();
            Nav.NavigateTo("products");
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("products");
    }
}
