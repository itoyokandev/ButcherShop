@page "/categories/{CategoryID:int}"

@inject IDbContextFactory<ButcherShopContext> DbFactory
@inject NavigationManager Nav

<style>
    .row {
        margin-bottom: 16px;
    }
</style>

@if (_category is null)
{
    <p><em>読み込み中です...</em></p>
}
else
{
    <RadzenTemplateForm Data="_category" Submit="@(async (Category arg) => { SubmitAsync(arg); })">
        <div class="row">
            <div class="col-md-12">
                <RadzenFieldset>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="カテゴリー名" for="CategoryName" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" Id="CategoryName" Name="CategoryName" @bind-Value="_category.CategoryName" />
                            <RadzenRequiredValidator Component="CategoryName" Text="カテゴリー名は必ず入力してください" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="よみがな" for="Yomigana" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" Id="Yomigana" Name="Yomigana" @bind-Value="_category.Yomigana" />
                            <RadzenRequiredValidator Component="Yomigana" Text="よみがなは必ず入力してください" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="並び順" for="SortOrder" />
                        </div>
                        <div class="col-md-8">
                            <RadzenNumeric style="width: 100%;" Id="SortOrder" Name="SortOrder" @bind-Value="_category.SortOrder" />
                            <RadzenRequiredValidator Component="SortOrder" Text="並び順は必ず入力してください" />
                        </div>
                    </div>
                    <div class="row justify-content-center">
                        <div class="col-md-8" style="margin-top: 16px;">
                            <RadzenButton ButtonStyle="ButtonStyle.Light" style="display: inline-block; margin-right: 20px;" Text="戻る" Click="@Cancel" IsBusy="_busy" />
                            <RadzenButton ButtonType="ButtonType.Submit" class="btn btn-secondary" Style="margin-right: 40px;" Text="更新する" IsBusy="_busy" />
                            <RadzenButton ButtonType="ButtonType.Button" class="btn btn-danger" Text="削除する" Click="@(async (_) => { DeleteAsync(); })" IsBusy="_busy" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
    </RadzenTemplateForm>
}

@if (_error)
{
    <div class="row">
        <div class="col-md-12">
            <div class="alert alert-danger">@_errorMessage</div>
        </div>
    </div>
}



@code {
    [Parameter]
    public int CategoryID { get; set; }

    private Category? _category;

    private bool _busy;

    private bool _error;

    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        _category = await context.Categories.FirstOrDefaultAsync(c => c.CategoryID == CategoryID);
    }

    private void Cancel()
    {
        Nav.NavigateTo("categories");
    }

    /// <summary>
    /// 必須項目が未入力の場合、Submitメソッドはよびだされない。<br>
    /// RadzenRequiredValidator
    /// </summary>
    /// <param name="arg"></param>
    private async Task SubmitAsync(Category arg)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;
            _error = false;
            _errorMessage = string.Empty;

            using var context = await DbFactory.CreateDbContextAsync();

            Category? dbCategory = await context.Categories.FirstOrDefaultAsync(c => c.CategoryID == CategoryID);
            if (dbCategory is null)
            {
                _error = true;
                _errorMessage = "このデータは削除されているため更新できません。戻るボタンをクリックして一覧に戻ってください。";
                return;
            }

            if (dbCategory.EditedDatetime > arg.EditedDatetime)
            {
                _error = true;
                _errorMessage = "このデータは既に更新されているため更新できません。戻るボタンをクリックして一覧に戻ってください。";
                return;
            }

            int nameSameCount = await context.Categories.CountAsync(c => c.CategoryID != CategoryID && c.CategoryName == arg.CategoryName.Trim());
            if (nameSameCount > 0)
            {
                _error = true;
                _errorMessage = "同じカテゴリー名で既に登録されているため更新できません。";
                return;
            }

            dbCategory.CategoryName = arg.CategoryName.Trim();
            dbCategory.Yomigana = arg.Yomigana.Trim();
            dbCategory.SortOrder = arg.SortOrder;
            dbCategory.EditedDatetime = DateTime.Now;
            // TODO User管理
            dbCategory.EditedUserID = 1;
            var affectedRows = await context.SaveChangesAsync();
            Nav.NavigateTo("categories");
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
            // 再レンダリングされないため、StateHasChangedメソッドを実行する。
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task DeleteAsync()
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;
            _error = false;
            _errorMessage = string.Empty;

            using var context = await DbFactory.CreateDbContextAsync();

            Category? dbCategory = await context.Categories.FirstOrDefaultAsync(c => c.CategoryID == CategoryID);
            if (dbCategory is null)
            {
                _error = true;
                _errorMessage = "このデータは削除されているため更新できません。戻るボタンをクリックして一覧に戻ってください。";
                return;
            }

            // TODO 商品マスタに紐づいているカテゴリーがある場合エラー


            context.Categories.Remove(dbCategory);
            await context.SaveChangesAsync();
            Nav.NavigateTo("categories");
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
            // 再レンダリングされないため、StateHasChangedメソッドを実行する。
            StateHasChanged();
        }
    }
}
