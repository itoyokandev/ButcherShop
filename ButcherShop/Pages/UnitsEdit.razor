@page "/units/{UnitID:int}"

@inject IDbContextFactory<ButcherShopContext> DbFactory
@inject NavigationManager Nav

<style>
    .row {
        margin-bottom: 16px;
    }
</style>

@if (_unit is null)
{
    <p><em>読み込み中です...</em></p>
}
else
{
    <RadzenTemplateForm Data="_unit" Submit="@(async (Unit arg) => { SubmitAsync(arg); })">
        <div class="row">
            <div class="col-md-12">
                <RadzenFieldset>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="単位" for="UnitName" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" Id="UnitName" Name="UnitName" @bind-Value="_unit.UnitName" />
                            <RadzenRequiredValidator Component="UnitName" Text="単位は必ず入力してください" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="並び順" for="SortOrder" />
                        </div>
                        <div class="col-md-8">
                            <RadzenNumeric style="width: 100%;" Id="SortOrder" Name="SortOrder" @bind-Value="_unit.SortOrder" />
                            <RadzenRequiredValidator Component="SortOrder" Text="並び順は必ず入力してください" />
                        </div>
                    </div>
                    <div class="row justify-content-center">
                        <div class="col-md-8" style="margin-top: 16px;">
                            <RadzenButton ButtonStyle="ButtonStyle.Light" style="display: inline-block; margin-right: 20px;" Text="戻る" Click="@Cancel" Is_busy="_busy" />
                            <RadzenButton ButtonType="ButtonType.Submit" class="btn btn-secondary" Style="margin-right: 40px;" Text="更新する" Is_busy="_busy" />
                            <RadzenButton ButtonType="ButtonType.Button" class="btn btn-danger" Text="削除する" Click="@(async (_) => { DeleteAsync(); })" Is_busy="_busy" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
    </RadzenTemplateForm>
}

@if (_error)
{
    <div class="row">
        <div class="col-md-12">
            <div class="alert alert-danger">@_errorMessage</div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int UnitID { get; set; }

    private Unit? _unit;

    private bool _busy;

    private bool _error;

    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        _unit = await context.Units.FirstOrDefaultAsync(c => c.UnitID == UnitID);
    }

    private void Cancel()
    {
        Nav.NavigateTo("units");
    }

    /// <summary>
    /// 必須項目が未入力の場合、Submitメソッドはよびだされない。<br>
    /// RadzenRequiredValidator
    /// </summary>
    /// <param name="arg"></param>
    private async Task SubmitAsync(Unit arg)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;
            _error = false;
            _errorMessage = string.Empty;

            using var context = await DbFactory.CreateDbContextAsync();

            Unit? dbUnit = await context.Units.FirstOrDefaultAsync(c => c.UnitID == UnitID);
            if (dbUnit is null)
            {
                _error = true;
                _errorMessage = "このデータは削除されているため更新できません。戻るボタンをクリックして一覧に戻ってください。";
                return;
            }

            if (dbUnit.EditedDatetime > arg.EditedDatetime)
            {
                _error = true;
                _errorMessage = "このデータは既に更新されているため更新できません。戻るボタンをクリックして一覧に戻ってください。";
                return;
            }

            int nameSameCount = await context.Units.CountAsync(c => c.UnitID != UnitID && c.UnitName == arg.UnitName.Trim());
            if (nameSameCount > 0)
            {
                _error = true;
                _errorMessage = "同じ単位が既に登録されているため更新できません。";
                return;
            }

            dbUnit.UnitName = arg.UnitName.Trim();
            dbUnit.SortOrder = arg.SortOrder;
            dbUnit.EditedDatetime = DateTime.Now;
            // TODO User管理
            dbUnit.EditedUserID = 1;
            var affectedRows = await context.SaveChangesAsync();
            Nav.NavigateTo("units");
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
            // 再レンダリングされないため、StateHasChangedメソッドを実行する。
            StateHasChanged();
        }
    }

    private async Task DeleteAsync()
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;
            _error = false;
            _errorMessage = string.Empty;

            using var context = await DbFactory.CreateDbContextAsync();

            Unit? dbUnit = await context.Units.FirstOrDefaultAsync(c => c.UnitID == UnitID);
            if (dbUnit is null)
            {
                _error = true;
                _errorMessage = "このデータは削除されているため更新できません。戻るボタンをクリックして一覧に戻ってください。";
                return;
            }

            // TODO 商品マスタに紐づいているカテゴリーがある場合エラー


            context.Units.Remove(dbUnit);
            await context.SaveChangesAsync();
            Nav.NavigateTo("units");
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
            // 再レンダリングされないため、StateHasChangedメソッドを実行する。
            StateHasChanged();
        }
    }
}
