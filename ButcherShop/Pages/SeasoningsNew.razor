@page "/seasonings/new"

@inject IDbContextFactory<ButcherShopContext> DbFactory
@inject NavigationManager Nav

<style>
    .row {
        margin-bottom: 16px;
    }
</style>

<RadzenTemplateForm Data="_seasoning" Submit="@(async (Seasoning arg) => { SubmitAsync(arg); })">
    <div class="row">
        <div class="col-md-12">
            <RadzenFieldset>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="味付け" for="SeasoningName" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Id="SeasoningName" Name="SeasoningName" @bind-Value="_seasoning.SeasoningName" />
                        <RadzenRequiredValidator Component="SeasoningName" Text="味付けは必ず入力してください" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="よみがな" for="Yomigana" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Id="Yomigana" Name="Yomigana" @bind-Value="_seasoning.Yomigana" />
                        <RadzenRequiredValidator Component="Yomigana" Text="よみがなは必ず入力してください" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="カテゴリー" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="false"
                                        TValue="int"
                                        AllowVirtualization="true"
                                        Class="w-100"
                                        Data=@_categories
                                        TextProperty="CategoryName"
                                        ValueProperty="CategoryID"
                                        @bind-Value="_seasoning.CategoryID" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="並び順" for="SortOrder" />
                    </div>
                    <div class="col-md-8">
                        <RadzenNumeric style="width: 100%;" Id="SortOrder" Name="SortOrder" @bind-Value="_seasoning.SortOrder" />
                        <RadzenRequiredValidator Component="SortOrder" Text="並び順は必ず入力してください" />
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-8" style="margin-top: 16px;">
                        <RadzenButton ButtonStyle="ButtonStyle.Light" style="display: inline-block; margin-right: 20px;" Text="戻る" Click="@Cancel" IsBusy="_busy" />
                        <RadzenButton ButtonType="ButtonType.Submit" class="btn btn-secondary" Style="margin-right: 20px;" Text="登録する" IsBusy="_busy" />
                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </div>
</RadzenTemplateForm>

@if (_error)
{
    <div class="row">
        <div class="col-md-12">
            <div class="alert alert-danger">@_errorMessage</div>
        </div>
    </div>
}

@code {

    private Seasoning _seasoning = new();

    private IEnumerable<Category>? _categories;

    private bool _busy;

    private bool _error;

    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        _categories = await context.Categories.OrderBy(c => c.SortOrder).ToListAsync();
    }

    private async Task SubmitAsync(Seasoning arg)
    {
        if (_busy) return;

        try
        {
            _busy = true;
            _error = false;
            _errorMessage = string.Empty;

            using var context = await DbFactory.CreateDbContextAsync();

            int nameSameCount = await context.Seasonings.CountAsync(s => s.CategoryID == arg.CategoryID &&
                                                                         s.SeasoningName == arg.SeasoningName.Trim());
            if (nameSameCount > 0)
            {
                _error = true;
                _errorMessage = "同じ味付けが既に登録されているため更新できません。";
                return;
            }

            Seasoning dbSeasoning = new()
                {
                    SeasoningName = arg.SeasoningName,
                    Yomigana = arg.Yomigana,
                    CategoryID = arg.CategoryID,
                    EditedDatetime = DateTime.Now,
                    // TODO User管理
                    EditedUserID = 1,
                };
            if (arg.SortOrder == 0)
            {
                // 並び順が0の場合、同じカテゴリーの並び順の最大値+1を設定する
                var sameCategorySeasonings = await context.Seasonings.CountAsync(s => s.CategoryID == arg.CategoryID);
                if (sameCategorySeasonings == 0)
                {
                    dbSeasoning.SortOrder = 1;
                }
                else
                {
                    dbSeasoning.SortOrder = await context.Seasonings
                                        .Where(s => s.CategoryID == arg.CategoryID)
                                        .MaxAsync(s => s.SortOrder) + 1;
                }
            }
            await context.Seasonings.AddAsync(dbSeasoning);
            var affectedRows = await context.SaveChangesAsync();
            Nav.NavigateTo("seasonings");
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
            // 再レンダリングされないため、StateHasChangedメソッドを実行する。
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("seasonings");
    }
}
